server:
  servlet:
    context-path: /iot-registry
spring:
  application:
    name: registry-service
  devtools:
    restart:
      enabled: false
management:
  endpoints:
    web:
      exposure:
        include: "*"
kafka:
  consumer:
    topic: iot-devices-data
    poll-timeout-ms: 2000
    restart-timeout-ms: 1000
    executor-termination-timeout-ms: 5000
    properties:
      bootstrap.server: localhost:9092
      group.id: telemetry-events
      key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      schema.registry.url: mock://my-scope:8081
      specific.avro.reader: true
      auto.offset.reset: earliest
      enable.auto.commit: false
      max.poll.records: 500
      max.poll.interval: 300000
      fetch.min.bytes: 1
      fetch.max.wait.ms: 5000
  producer:
    topic: dead-letter-telemetries-persists
    properties:
      bootstrap.servers: localhost:9092
      key.serializer: org.apache.kafka.common.serialization.StringSerializer
      value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      schema.registry.url: mock://my-scope:8081
  producer-test:
    topic: iot-devices-data
    properties:
      bootstrap.servers: localhost:9092
      key.serializer: org.apache.kafka.common.serialization.StringSerializer
      value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      schema.registry.url: mock://my-scope:8081
parallel.patcher:
  threads.amount: 10
  executor.termination.time.ms: 5000
persister:
  retries:
    max.attempts: 5
    wait.duration.ms: 100
